{"ast":null,"code":"import _objectSpread from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/docker/sticky-notes-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      notes: [{\n        id: 0,\n        title: \"eat\",\n        description: \"reese peanut butter cups\",\n        doesMatchSearch: true\n      }, {\n        id: 1,\n        title: \"sleep\",\n        description: \"eight hours\",\n        doesMatchSearch: true\n      }, {\n        id: 2,\n        title: \"code\",\n        description: \"build an awesome ui\",\n        doesMatchSearch: true\n      }],\n      searchText: \"Search\"\n    };\n\n    _this.addNote = function () {\n      var newNote = {\n        id: Date.now(),\n        title: '',\n        description: '',\n        doesMatchSearch: true\n      };\n      var newNotes = [].concat(_toConsumableArray(_this.state.notes), [newNote]);\n\n      _this.setState({\n        notes: newNotes\n      });\n    };\n\n    _this.removeNote = function (removeId) {\n      var remainingNote = {\n        id: Date.now(),\n        title: '',\n        description: '',\n        doesMatchSearch: true\n      };\n      var remainingNotes = [].concat(_toConsumableArray(_this.state.notes), [remainingNote]);\n\n      _this.setState({\n        notes: remainingNotes\n      });\n    };\n\n    _this.onType = function (editMeId, updatedKey, updatedValue) {\n      var editNote = _this.state.notes.find(function (x) {\n        return x.id === editMeId;\n      });\n\n      editNote[updatedKey] = updatedValue;\n      var newList = _this.state.notes;\n      newList[editMeId] = editNote;\n\n      _this.setState({\n        notes: newList\n      });\n    };\n\n    _this.onSearch = function (e) {\n      /* toggle the doesMatchSearch boolean value of each sticky\n      note when the user types in the search field.\n      set the doesMatchSearch value to true for a sticky note if\n      it's title or description matches the search string. */\n      var searchText = e.target.value.toLowerCase();\n\n      var updatedNotes = _this.state.notes.map(function (note) {\n        if (!searchText) {\n          /* If the search field is empty, then\n          we set the doesMatchSearch value for every note to true. */\n          return _objectSpread({}, note, {\n            doesMatchSearch: true\n          });\n        } else {\n          var title = note.title.toLowerCase();\n          var description = note.description.toLowerCase();\n          var titleMatch = title.includes(searchText);\n          var descriptionMatch = description.includes(searchText);\n          var hasMatch = titleMatch || descriptionMatch;\n          return _objectSpread({}, note, {\n            doesMatchSearch: hasMatch\n          });\n        }\n      });\n\n      _this.setState({\n        searchText: searchText,\n        notes: updatedNotes\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        searchText: this.state.searchText,\n        addNew: this.addNote,\n        onSearch: this.onSearch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(NotesList, {\n        notes: this.state.notes,\n        onType: this.onType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/docker/sticky-notes-app/src/App.js"],"names":["React","Component","Header","NotesList","App","state","notes","id","title","description","doesMatchSearch","searchText","addNote","newNote","Date","now","newNotes","setState","removeNote","removeId","remainingNote","remainingNotes","onType","editMeId","updatedKey","updatedValue","editNote","find","x","newList","onSearch","e","target","value","toLowerCase","updatedNotes","map","note","titleMatch","includes","descriptionMatch","hasMatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\n\nclass App extends Component {\n    state = {\n        notes: [{\n            id: 0,\n            title: \"eat\",\n            description: \"reese peanut butter cups\",\n            doesMatchSearch: true\n        },\n        {\n            id: 1,\n            title: \"sleep\",\n            description: \"eight hours\",\n            doesMatchSearch: true\n        },\n        {\n            id: 2,\n            title: \"code\",\n            description: \"build an awesome ui\",\n            doesMatchSearch: true\n        }],\n        searchText: \"Search\",\n\n    }\n\n    addNote = () => {\n        var newNote = {\n            id: Date.now(),\n            title: '',\n            description: '',\n            doesMatchSearch: true,\n        }\n\n        var newNotes = [...this.state.notes, newNote];\n        this.setState({ notes: newNotes });\n    }\n\n    removeNote = (removeId) => {\n        var remainingNote = {\n            id: Date.now(),\n            title: '',\n            description: '',\n            doesMatchSearch: true,\n        }\n\n        var remainingNotes = [...this.state.notes, remainingNote];\n        this.setState({ notes: remainingNotes });\n    }\n\n    onType = (editMeId, updatedKey, updatedValue) => {\n        var editNote = this.state.notes.find(x => x.id === editMeId);\n        editNote[updatedKey] = updatedValue;\n        var newList = this.state.notes;\n        newList[editMeId] = editNote;\n        this.setState({ notes: newList });\n    };\n\n    onSearch = e => {\n        /* toggle the doesMatchSearch boolean value of each sticky\n        note when the user types in the search field.\n        set the doesMatchSearch value to true for a sticky note if\n        it's title or description matches the search string. */\n        var searchText = e.target.value.toLowerCase();\n        var updatedNotes = this.state.notes.map(note => {\n            if (!searchText) {\n                /* If the search field is empty, then\n              we set the doesMatchSearch value for every note to true. */\n                return {\n                    ...note,\n                    doesMatchSearch: true\n                };\n            } else {\n                var title = note.title.toLowerCase();\n                var description = note.description.toLowerCase();\n                var titleMatch = title.includes(searchText);\n                var descriptionMatch = description.includes(searchText);\n                var hasMatch = titleMatch || descriptionMatch;\n                return {\n                    ...note,\n                    doesMatchSearch: hasMatch\n                };\n            }\n        });\n        this.setState({\n            searchText: searchText,\n            notes: updatedNotes\n        });\n    };\n\n    render() {\n        return (\n            <div class=\"App\">\n                <Header searchText={this.state.searchText} addNew={this.addNote} onSearch={this.onSearch} />\n                <NotesList notes={this.state.notes} onType={this.onType} />\n            </div>\n        );\n    }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}