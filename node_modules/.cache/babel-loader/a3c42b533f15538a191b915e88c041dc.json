{"ast":null,"code":"import _toConsumableArray from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/docker/sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/docker/sticky-notes-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      notes: [{\n        id: 0,\n        title: \"eat\",\n        description: \"reese peanut butter cups\",\n        doesMatchSearch: true\n      }, {\n        id: 1,\n        title: \"sleep\",\n        description: \"eight hours\",\n        doesMatchSearch: true\n      }, {\n        id: 2,\n        title: \"code\",\n        description: \"build an awesome ui\",\n        doesMatchSearch: true\n      }],\n      searchText: \"Search\"\n    };\n\n    _this.addNote = function () {\n      var newNote = {\n        id: Date.now(),\n        title: '',\n        description: '',\n        doesMatchSearch: true\n      };\n      var newNotes = [].concat(_toConsumableArray(_this.state.notes), [newNote]);\n\n      _this.setState({\n        notes: newNotes\n      });\n    };\n\n    _this.onType = function (editMeId, updatedKey, updatedValue) {\n      /* this event handler updates sticky note text fields\n        - editMeId: the id of the note that the user typed in\n        - updatedKey: which field was edited? 'title' or 'description'\n        - updatedValue: new value of edited field */\n      var editNote = _this.state.notes.find(function (x) {\n        return x.id === editMeId;\n      });\n\n      console.log(editMeId);\n      editNote[updatedKey] = updatedValue;\n      var updatedNotes = [].concat(_toConsumableArray(_this.state.notes), [editNote]);\n      ;\n\n      _this.setState({\n        notes: updatedNotes\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        searchText: this.state.searchText,\n        addNew: this.addNote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(NotesList, {\n        notes: this.state.notes,\n        onType: this.onType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/docker/sticky-notes-app/src/App.js"],"names":["React","Component","Header","NotesList","App","state","notes","id","title","description","doesMatchSearch","searchText","addNote","newNote","Date","now","newNotes","setState","onType","editMeId","updatedKey","updatedValue","editNote","find","x","console","log","updatedNotes"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;IAGMC,G;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,EAAE,EAAE,CADA;AAEJC,QAAAA,KAAK,EAAE,KAFH;AAGJC,QAAAA,WAAW,EAAE,0BAHT;AAIJC,QAAAA,eAAe,EAAE;AAJb,OAAD,EAMP;AACIH,QAAAA,EAAE,EAAE,CADR;AAEIC,QAAAA,KAAK,EAAE,OAFX;AAGIC,QAAAA,WAAW,EAAE,aAHjB;AAIIC,QAAAA,eAAe,EAAE;AAJrB,OANO,EAYP;AACIH,QAAAA,EAAE,EAAE,CADR;AAEIC,QAAAA,KAAK,EAAE,MAFX;AAGIC,QAAAA,WAAW,EAAE,qBAHjB;AAIIC,QAAAA,eAAe,EAAE;AAJrB,OAZO,CADH;AAmBJC,MAAAA,UAAU,EAAE;AAnBR,K;;UAuBRC,O,GAAU,YAAM;AACZ,UAAIC,OAAO,GAAG;AACVN,QAAAA,EAAE,EAAEO,IAAI,CAACC,GAAL,EADM;AAEVP,QAAAA,KAAK,EAAE,EAFG;AAGVC,QAAAA,WAAW,EAAE,EAHH;AAIVC,QAAAA,eAAe,EAAE;AAJP,OAAd;AAOA,UAAIM,QAAQ,gCAAO,MAAKX,KAAL,CAAWC,KAAlB,IAAyBO,OAAzB,EAAZ;;AACA,YAAKI,QAAL,CAAc;AAAEX,QAAAA,KAAK,EAAEU;AAAT,OAAd;AACH,K;;UAEDE,M,GAAS,UAACC,QAAD,EAAWC,UAAX,EAAuBC,YAAvB,EAAwC;AAC7C;;;;AAIA,UAAIC,QAAQ,GAAG,MAAKjB,KAAL,CAAWC,KAAX,CAAiBiB,IAAjB,CAAsB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACjB,EAAF,KAASY,QAAb;AAAA,OAAvB,CAAf;;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAG,MAAAA,QAAQ,CAACF,UAAD,CAAR,GAAuBC,YAAvB;AACA,UAAIM,YAAY,gCAAO,MAAKtB,KAAL,CAAWC,KAAlB,IAAyBgB,QAAzB,EAAhB;AAAmD;;AACnD,YAAKL,QAAL,CAAc;AAAEX,QAAAA,KAAK,EAAEqB;AAAT,OAAd;AACD,K;;;;;;;6BAEM;AACL,0BACI;AAAK,QAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKtB,KAAL,CAAWM,UAA/B;AAA2C,QAAA,MAAM,EAAE,KAAKC,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,KAA7B;AAAoC,QAAA,MAAM,EAAE,KAAKY,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EAvDajB,S;;AA2DlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\n\nclass App extends Component {\n    state = {\n        notes: [{\n            id: 0,\n            title: \"eat\",\n            description: \"reese peanut butter cups\",\n            doesMatchSearch: true\n        },\n        {\n            id: 1,\n            title: \"sleep\",\n            description: \"eight hours\",\n            doesMatchSearch: true\n        },\n        {\n            id: 2,\n            title: \"code\",\n            description: \"build an awesome ui\",\n            doesMatchSearch: true\n        }],\n        searchText: \"Search\",\n\n    }\n\n    addNote = () => {\n        var newNote = {\n            id: Date.now(),\n            title: '',\n            description: '',\n            doesMatchSearch: true,\n        }\n\n        var newNotes = [...this.state.notes, newNote];\n        this.setState({ notes: newNotes });\n    }\n\n    onType = (editMeId, updatedKey, updatedValue) => {\n        /* this event handler updates sticky note text fields\n          - editMeId: the id of the note that the user typed in\n          - updatedKey: which field was edited? 'title' or 'description'\n          - updatedValue: new value of edited field */\n        var editNote = this.state.notes.find(x => x.id === editMeId);\n        console.log(editMeId);\n        editNote[updatedKey] = updatedValue;\n        var updatedNotes = [...this.state.notes, editNote];;\n        this.setState({ notes: updatedNotes });\n      };\n\n    render() {\n        return (\n            <div class=\"App\">\n                <Header searchText={this.state.searchText} addNew={this.addNote} />\n                <NotesList notes={this.state.notes} onType={this.onType} />\n            </div>\n        );\n    }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}